<thekogans_make organization = "thekogans"
                project = "crypto"
                project_type = "library"
                major_version = "0"
                minor_version = "8"
                patch_version = "0"
                guid = "51807feb568098447581aabaefb41bf0"
                schema_version = "2">
  <features>
    <feature>THEKOGANS_CRYPTO_HAVE_ARGON2</feature>
    <!-- <feature>THEKOGANS_CRYPTO_HAVE_BLAKE2</feature> -->
    <feature>THEKOGANS_CRYPTO_HAVE_TESTS</feature>
  </features>
  <dependencies>
    <dependency organization = "thekogans"
                name = "util"/>
    <toolchain organization = "thekogans"
               name = "openssl_ssl"/>
    <toolchain organization = "thekogans"
               name = "openssl_crypto"/>
    <if condition = "$(have_feature -f:THEKOGANS_CRYPTO_HAVE_ARGON2)">
      <toolchain organization = "thekogans"
                 name = "argon2"/>
    </if>
    <if condition = "$(have_feature -f:THEKOGANS_CRYPTO_HAVE_BLAKE2)">
      <toolchain organization = "thekogans"
                 name = "blake2"/>
    </if>
    <choose>
      <when condition = "$(TOOLCHAIN_OS) == 'Windows'">
        <library>Crypt32.lib</library>
      </when>
      <when condition = "$(TOOLCHAIN_OS) == 'OSX'">
        <framework>CoreFoundation</framework>
        <framework>Security</framework>
      </when>
    </choose>
  </dependencies>
  <if condition = "$(config) == 'Debug'">
    <cpp_preprocessor_definitions>
      <cpp_preprocessor_definition>THEKOGANS_CRYPTO_TESTING</cpp_preprocessor_definition>
    </cpp_preprocessor_definitions>
  </if>
  <cpp_headers prefix = "include"
               install = "yes">
    <if condition = "$(have_feature -f:THEKOGANS_CRYPTO_HAVE_ARGON2)">
      <cpp_header>$(organization)/$(project_directory)/Argon2Exception.h</cpp_header>
    </if>
    <cpp_header>$(organization)/$(project_directory)/AsymmetricKey.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Authenticator.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Cipher.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/CipherSuite.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/CiphertextHeader.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Config.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/CMAC.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Decryptor.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/DH.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/DHEKeyExchange.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/DSA.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/EC.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Encryptor.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/FrameHeader.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/HMAC.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/ID.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/KeyExchange.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/KeyRing.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/MAC.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/MessageDigest.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/OpenSSLAllocator.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/OpenSSLException.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/OpenSSLInit.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/OpenSSLUtils.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Params.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/RSA.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/RSAKeyExchange.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Serializable.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Signer.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Stats.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/SymmetricKey.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/SystemCACertificates.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Verifier.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Version.h</cpp_header>
  </cpp_headers>
  <cpp_sources prefix = "src">
    <cpp_source>AsymmetricKey.cpp</cpp_source>
    <cpp_source>Authenticator.cpp</cpp_source>
    <cpp_source>Cipher.cpp</cpp_source>
    <cpp_source>CipherSuite.cpp</cpp_source>
    <cpp_source>CMAC.cpp</cpp_source>
    <cpp_source>Decryptor.cpp</cpp_source>
    <cpp_source>DH.cpp</cpp_source>
    <cpp_source>DHEKeyExchange.cpp</cpp_source>
    <cpp_source>DSA.cpp</cpp_source>
    <cpp_source>EC.cpp</cpp_source>
    <cpp_source>Encryptor.cpp</cpp_source>
    <cpp_source>HMAC.cpp</cpp_source>
    <cpp_source>ID.cpp</cpp_source>
    <cpp_source>KeyExchange.cpp</cpp_source>
    <cpp_source>KeyRing.cpp</cpp_source>
    <cpp_source>MAC.cpp</cpp_source>
    <cpp_source>MessageDigest.cpp</cpp_source>
    <cpp_source>OpenSSLAllocator.cpp</cpp_source>
    <cpp_source>OpenSSLException.cpp</cpp_source>
    <cpp_source>OpenSSLInit.cpp</cpp_source>
    <cpp_source>OpenSSLUtils.cpp</cpp_source>
    <cpp_source>Params.cpp</cpp_source>
    <cpp_source>RSA.cpp</cpp_source>
    <cpp_source>RSAKeyExchange.cpp</cpp_source>
    <cpp_source>Serializable.cpp</cpp_source>
    <cpp_source>Signer.cpp</cpp_source>
    <cpp_source>Stats.cpp</cpp_source>
    <cpp_source>SymmetricKey.cpp</cpp_source>
    <cpp_source>SystemCACertificates.cpp</cpp_source>
    <cpp_source>Verifier.cpp</cpp_source>
    <cpp_source>Version.cpp</cpp_source>
  </cpp_sources>
  <if condition = "$(have_feature -f:THEKOGANS_CRYPTO_HAVE_TESTS)">
    <cpp_tests prefix = "tests">
      <cpp_test>test_AsymmetricKey.cpp</cpp_test>
      <cpp_test>test_Authenticator.cpp</cpp_test>
      <cpp_test>test_Cipher.cpp</cpp_test>
      <cpp_test>test_CipherSuite.cpp</cpp_test>
      <cpp_test>test_KeyRing.cpp</cpp_test>
      <cpp_test>test_KeyExchange.cpp</cpp_test>
      <cpp_test>test_MAC.cpp</cpp_test>
      <cpp_test>test_MessageDigest.cpp</cpp_test>
      <cpp_test>test_Params.cpp</cpp_test>
      <cpp_test>test_SymmetricKey.cpp</cpp_test>
      <cpp_test>test_SystemCACertificates.cpp</cpp_test>
    </cpp_tests>
  </if>
</thekogans_make>
